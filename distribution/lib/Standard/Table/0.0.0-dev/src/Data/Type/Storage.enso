from Standard.Base import all
import Standard.Base.Errors.Common.Index_Out_Of_Bounds
import Standard.Base.Errors.Illegal_State.Illegal_State

import Standard.Table.Data.Type.Value_Type.Value_Type
import Standard.Table.Data.Type.Value_Type.Bits

polyglot java import org.enso.table.data.column.builder.object.Builder
polyglot java import org.enso.table.data.column.storage.type.StorageType

## PRIVATE
   Gets the value type represented by this Java Storage.
to_value_type : StorageType -> Value_Type
to_value_type storage_type = case storage.getStoredType of
    i : StorageType.Integer -> case i.bits of
        8 -> Value_Type.Byte
        _ ->
            bits = Bits.from_bits i.bits
            Value_Type.Integer bits
    f : StorageType.Float ->
        bits = Bits.from_bits f.bits
        Value_Type.Float bits
    _ : StorageType.Boolean -> Value_Type.Boolean
    s : StorageType.FixedLengthString -> Value_Type.Char size=s.length variable=False
    _ : StorageType.VariableLengthString -> Value_Type.Char size=Nothing variable=True
    _ : StorageType.Date -> Value_Type.Date
    _ : StorageType.DateTime -> Value_Type.Date_Time with_timezone=True
    _ : StorageType.TimeOfDay -> Value_Type.Time
    _ : StorageType.AnyObject -> Value_Type.Mixed

## PRIVATE
closest_storage_type value_type = case value_type of
    # TODO we will want builders and storages with bounds checking, but for now we approximate
    Value_Type.Byte -> StorageType.INTEGER_64
    Value_Type.Integer _ -> StorageType.INTEGER_64
    Value_Type.Float _ -> StorageType.FLOAT_64
    Value_Type.Boolean -> StorageType.BOOLEAN
    Value_Type.Char size variable -> case size of
        Nothing -> StorageType.VARIABLE_LENGTH_STRING
        size : Integer -> StorageType.FixedLengthString.new size
    Value_Type.Date -> StorageType.DATE
    Value_Type.Date_Time with_timezone -> StorageType.DATE_TIME
    Value_Type.Time -> StorageType.TIME_OF_DAY
    Value_Type.Mixed -> StorageType.ANY_OBJECT

## PRIVATE
from_value_type : Value_Type -> Problem_Behavior -> StorageType
from_value_type value_type on_problems =
    approximate_storage = closest_storage_type value_type
    approximated_value_type = to_value_type approximate_storage
    problems = if approximated_value_type == value_type then [] else
        [Inexact_Type_Coercion.Warning value_type approximated_value_type]
    on_problems.attach_problems_before problems approximate_storage

## PRIVATE
   Creates a column storage builder for the given storage type.
make_builder : StorageType -> Integer -> Builder
make_builder storage initial_size=64 =
    Builder.getForType storage initial_size
