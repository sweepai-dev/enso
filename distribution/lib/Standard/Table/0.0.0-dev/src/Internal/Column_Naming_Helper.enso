from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

from project.Errors import Name_Too_Long
from project.Internal.Table_Helpers import is_column

polyglot java import org.enso.base.Text_Utils
polyglot java import org.enso.table.data.table.Column as Java_Column

## PRIVATE
   An utility module for validating and generating column names.
type Column_Naming_Helper
    ## PRIVATE
       Arguments:
       - max_name_length_units: Specifies a maximum length for the column name. Note
         that the length is expressed in code units (chars) and not graphemes,
         like in most places.
    Value (max_name_length_units : Integer | Nothing)

    ## PRIVATE
    has_length_limit : Boolean
    has_length_limit self = self.max_name_length_units.is_nothing.not

    ## PRIVATE
       Checks if the name is valid and runs the action, otherwise raises an error.
    ensure_name_is_valid self name ~action =
        checked = Illegal_Argument.handle_java_exception <|
            Java_Column.ensureNameIsValid name
        checked.if_not_error <| case self.max_name_length_units of
            Nothing -> action
            max_length ->
                name_length = Text_Utils.char_length name
                if name_length <= max_length then action else
                    Error.throw (Name_Too_Long.Error "column" name max_length)

    ## PRIVATE
       Checks if the names are valid and runs the action, otherwise raises an error.
    validate_many_column_names self names ~action =
        names.all (name-> self.ensure_name_is_valid name True) . if_not_error action

    ## PRIVATE
       Ensures that the name does not contain the null character.
    sanitize_name : Text -> Text
    sanitize_name self name =
        # TODO also truncate!
        # Using the regex matcher due to the #5831 bug.
        name.replace '\0'.to_regex '\\0'

    ## PRIVATE
       Generates a column name for a binary operation.
    binary_operation_name : Text -> Any -> Any -> Text
    binary_operation_name self operation_name left right =
        lhs = self.to_expression_text left
        rhs = self.to_expression_text right
        lhs + " " + operation_name + " " + rhs

    ## PRIVATE
       Generates a column name for a function-like transformation.
    function_name : Text -> Vector Any -> Text
    function_name self function_name arguments =
        function_name + "(" + (arguments.map self.to_expression_text . join ", ") + ")"

    ## PRIVATE
       Serializes a given object into an expression-like text approximation.

       For columns, it will return its name wrapped in `[` and `]`, with the `]`
       symbols in the name escaped as `]]`, according to the expression rules.
       For other objects, it will return its pretty-printed representation.
    to_expression_text self value =
        if is_column value then "[" + value.name.replace "]" "]]" + "]" else
            value.pretty
