from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import project.Data.Column.Column

polyglot java import java.sql.Types

## Represents an internal SQL data-type.
type SQL_Type

    ## Represents an internal SQL data-type.

       Arguments:
       - typeid: a numerical type id, as defined in `java.sql.Types`.
       - name: a database-specific type name, used for pretty printing.
       - precision: For character types, specifies their length.
         See `ResultSetMetaData.getPrecision`.
       - scale: The scale for fixed precision numeric types. Not applicable for
         other types, so it's value is undefined and will usually just be 0.
         See `ResultSetMetaData.getScale`.
       - nullable: Specifies if the given column is nullable. May be `Nothing`
         if that is unknown / irrelevant for the type.
         TODO: the precise meaning of this will be revised with #5872.
    Value (typeid : Integer) (name : Text) (precision : Nothing | Integer = Nothing) (scale : Integer = 0) (nullable : Boolean | Nothing = Nothing)

    ## The SQL type representing a null value.
    null : SQL_Type
    null = SQL_Type.Value Types.NULL "NULL"

    ## PRIVATE

       Returns True if this type represents an integer or a double.

       It only handles the standard types so it may return false negatives for
       non-standard ones.
    is_definitely_numeric : Boolean
    is_definitely_numeric self = self.is_definitely_double || self.is_definitely_integer

    ## PRIVATE

       Returns True if this type represents an integer.

       It only handles the standard types so it may return false negatives for
       non-standard ones.
    is_definitely_integer : Boolean
    is_definitely_integer self =
        [Types.INTEGER, Types.BIGINT, Types.SMALLINT, Types.TINYINT].contains self.typeid

    ## PRIVATE

       Returns True if this type represents a boolean.

       It only handles the standard types so it may return false negatives for
       non-standard ones.
    is_definitely_boolean : Boolean
    is_definitely_boolean self =
        [Types.BOOLEAN, Types.BIT].contains self.typeid

    ## PRIVATE

       Returns True if this type represents a floating point number.

       It only handles the standard types so it may return false negatives for
       non-standard ones.
    is_definitely_double : Boolean
    is_definitely_double self =
        [Types.FLOAT, Types.DOUBLE, Types.REAL].contains self.typeid

    ## PRIVATE
       Returns True if this type represents a Text.
    is_definitely_text : Boolean
    is_definitely_text self =
       [Types.VARCHAR, Types.LONGVARCHAR, Types.NVARCHAR, Types.LONGNVARCHAR].contains self.typeid

    ## PRIVATE
       Returns True if this type represents a Text, using heuristics that may
       match more possible types.
    is_likely_text : Boolean
    is_likely_text self =
       self.is_definitely_text || self.name.contains "text" Case_Sensitivity.Insensitive

    ## PRIVATE
    is_null : Boolean
    is_null self = self.typeid == Types.NULL
