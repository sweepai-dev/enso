from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State

from Standard.Table.Errors import Name_Too_Long

polyglot java import org.enso.base.Text_Utils

## PRIVATE
   A helper for checking and generating table names.
type Table_Naming_Helper
    ## PRIVATE
    Value connection

    ## PRIVATE
       Maximum length (in code units) for table name length.
       Nothing if there is no limit.
    max_name_length_units : Integer | Nothing
    max_name_length_units self =
        reported = self.connection.jdbc_connection.with_metadata .getMaxTableNameLength
        if reported == 0 then Nothing else reported

    ## PRIVATE
       Verifies if the table name is valid.
       If valid, it runs the provided action, otherwise it reports an error.
    verify_table_name : Text -> Any -> Any ! Name_Too_Long
    verify_table_name self table_name ~action =
        if self.is_table_name_valid table_name then action else
            Error.throw (Name_Too_Long.Error "table" table_name self.max_name_length_units)

    ## PRIVATE
    is_table_name_valid : Text -> Boolean
    is_table_name_valid self table_name =
        case self.max_name_length_units of
            Nothing -> True
            max_length ->
                name_length = Text_Utils.char_length table_name
                name_length <= max_length

    ## PRIVATE
       Generates a temporary table name for the given table name, used for dry
       runs.

       The table name is 'stable', meaning that the same name will be returned
       for the given input `table_name` on subsequent calls, unless the user
       creates a clashing table in the meantime.

       The table name is guaranteed to be unique for the database at the time it
       is generated - this is used to ensure that the dry run tables never
       overwrite pre-existing user data.

       ! Safety

         It is safe to drop/overwrite the table returned by this method, as it
         can be assumed that it was not created by the user. It either does not
         (yet) exist, or if it exists, it is present in our hidden table
         registry - but that means it was created by Enso as a hidden table.
    generate_dry_run_table_name : Text -> Text
    generate_dry_run_table_name self table_name =
        max_length = (self.max_name_length_units.if_nothing 60) - 1
        go ix =
            prefix = "enso-dry-run-" + if ix == 0 then "" else ix.to_text + "-"
            ## This check ensures that if all possible names are taken, the
               method will not loop forever but report an error. It should never
               occur in practice - it would mean that the Database contains
               unimaginable amounts of dry run tables or has impractically small
               table name length limit.
            if prefix.length > max_length then Error.throw (Illegal_State.Error "Reached the table name length limit ("+max_length.to_text+") while trying to find a unused table name. It seems that all possible names are already taken. The Database may need to be cleaned up for dry run to work.") else
                name = (prefix + table_name) . take max_length
                ## The dry run name is ok if it is already registered (that means it
                   may exist in the Database, but it was created by other dry runs
                   and is safe to overwrite) or if it does not exist in the database.
                name_ok = (self.connection.hidden_table_registry.is_registered name) || (self.connection.table_exists name . not)
                if name_ok then name else
                    @Tail_Call go (ix + 1)
        go 0

    ## PRIVATE
       Generates a random table name that does not currently exist in the
       database.
    generate_random_table_name : Text -> Text
    generate_random_table_name self prefix="enso-table-" =
        max_length = self.max_name_length_units
        minimum_randomness = 5
        maximum_retries = 20^minimum_randomness
        if max_length.is_nothing.not && (prefix.length + minimum_randomness > max_length) then Error.throw (Illegal_State.Error "The prefix has length "+prefix.length.to_text+" while max table name is "+max_length.to_text+" - there is not enough space to safely generate random names.") else
            go ix =
                if ix > maximum_retries then Error.throw (Illegal_State.Error "Could not generate a non-assigned random table name after "+maximum_retries+". Giving up.") else
                    base_name = prefix + Random.random_uuid
                    name = if max_length.is_nothing then base_name else base_name.take max_length
                    if self.connection.table_exists name . not then name else
                        @Tail_Call go (ix + 1)
            go 0

    ## PRIVATE
       Verifies if the column names are valid.
       If valid, it runs the provided action, otherwise it reports an error.
    verify_column_names : Vector Text -> Any -> Any ! Name_Too_Long
    verify_column_names self column_names ~action =
        case self.max_column_name_length of
            Nothing -> action
            max_length ->
                is_too_long column_name =
                    name_length = Text_Utils.char_length column_name
                    name_length > max_length
                case column_names.find is_too_long if_missing=Nothing of
                    Nothing -> action
                    too_long_name ->
                        Error.throw (Name_Too_Long.Error "column" too_long_name max_length)
